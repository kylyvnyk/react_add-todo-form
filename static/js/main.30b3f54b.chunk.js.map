{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","classnames","completed","title","TodoList","todos","map","getUserById","userId","usersFromServer","find","initialTodos","person","App","useState","setTodos","setTitle","hasTitleError","setHasTitleError","setUserId","hasUserIdError","setHasUserIdError","action","method","onSubmit","event","preventDefault","newTodo","maxId","Math","max","prevTodos","htmlFor","type","placeholder","value","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.30b3f54b.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../../Types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classnames from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../../Types/Todo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={classnames('TodoInfo', {\n        'TodoInfo--completed': todo.completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      {todo.user && <UserInfo user={todo.user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../Types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { Todo } from './Types/Todo';\nimport { User } from './Types/User';\nimport { TodoList } from './components/TodoList';\n\nconst getUserById = (userId: number): User | null => {\n  return usersFromServer.find(user => userId === user.id)\n    || null;\n};\n\nconst initialTodos = todosFromServer.map((todo) => {\n  const user = usersFromServer.find(person => person.id === todo.userId);\n\n  return { ...todo, user };\n});\n\nexport const App = () => {\n  const [todos, setTodos] = useState<Todo[]>(initialTodos);\n\n  const [title, setTitle] = useState('');\n  const [hasTitleError, setHasTitleError] = useState(false);\n\n  const [userId, setUserId] = useState(0);\n  const [hasUserIdError, setHasUserIdError] = useState(false);\n  // #region handlers\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setHasTitleError(false);\n  };\n\n  const handleUserIdChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setHasUserIdError(false);\n  };\n  // #endregion\n\n  const addTodo = (newTodo: Todo) => {\n    setTodos(prevTodos => [...prevTodos, newTodo]);\n  };\n\n  const reset = () => {\n    setUserId(0);\n    setTitle('');\n\n    setHasUserIdError(false);\n    setHasTitleError(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setHasTitleError(!title);\n    setHasUserIdError(!userId);\n\n    if (!title || !userId) {\n      return;\n    }\n\n    const maxId = Math.max(...todos.map((todo) => todo.id));\n\n    addTodo({\n      id: maxId + 1,\n      title,\n      completed: false,\n      userId,\n      user: getUserById(userId) || null,\n    });\n\n    reset();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todoges\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"post-title\">Title:  </label>\n          <input\n            id=\"post-title\"\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={handleTitleChange}\n          />\n          {hasTitleError && (\n            <span className=\"error\">  Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"post-user\">User:  </label>\n          <select\n            data-cy=\"userSelect\"\n            id=\"post-user\"\n            value={userId}\n            onChange={handleUserIdChange}\n          >\n            <option value=\"\">Choose a user</option>\n            {usersFromServer.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n\n              >\n                {user.name}\n              </option>\n            ))}\n\n          </select>\n          {hasUserIdError && (\n            <span className=\"error\">  Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}